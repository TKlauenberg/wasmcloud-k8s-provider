// Generated by `wit-bindgen-wrpc-go` 0.11.0. DO NOT EDIT!
package handler

import (
	bytes "bytes"
	context "context"
	errors "errors"
	fmt "fmt"
	k8s__provider__types "github.com/TKlauenberg/wasmcloud-k8s-provider/bindings/k8s/provider/types"
	io "io"
	slog "log/slog"
	utf8 "unicode/utf8"
	wrpc "wrpc.io/go"
)

type ResourceEvent = k8s__provider__types.ResourceEvent
type Handler interface {
	// Handle a Kubernetes resource event.
	// @param event The resource event to handle.
	// @returns A status indicating the result of the operation.
	Handle(ctx__ context.Context, event *k8s__provider__types.ResourceEvent) error
}

func ServeInterface(s wrpc.Server, h Handler) (stop func() error, err error) {
	stops := make([]func() error, 0, 1)
	stop = func() error {
		for _, stop := range stops {
			if err := stop(); err != nil {
				return err
			}
		}
		return nil
	}

	stop0, err := s.Serve("k8s:provider/handler@0.1.0", "handle", func(ctx context.Context, w wrpc.IndexWriteCloser, r wrpc.IndexReadCloser) {
		defer func() {
			if err := w.Close(); err != nil {
				slog.DebugContext(ctx, "failed to close writer", "instance", "k8s:provider/handler@0.1.0", "name", "handle", "err", err)
			}
		}()
		slog.DebugContext(ctx, "reading parameter", "i", 0)
		p0, err := func() (*ResourceEvent, error) {
			v, err := func(r wrpc.IndexReadCloser, path ...uint32) (*k8s__provider__types.ResourceEvent, error) {
				v := &k8s__provider__types.ResourceEvent{}
				var err error
				slog.Debug("reading field", "name", "event-type")
				v.EventType, err = func(r wrpc.IndexReadCloser, path ...uint32) (*k8s__provider__types.EventType, error) {
					v := &k8s__provider__types.EventType{}
					n, err := func(r io.ByteReader) (uint8, error) {
						var x uint8
						var s uint
						for i := 0; i < 2; i++ {
							slog.Debug("reading u8 discriminant byte", "i", i)
							b, err := r.ReadByte()
							if err != nil {
								if i > 0 && err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								return x, fmt.Errorf("failed to read u8 discriminant byte: %w", err)
							}
							if s == 7 && b > 0x01 {
								return x, errors.New("discriminant overflows an 8-bit integer")
							}
							if b < 0x80 {
								return x | uint8(b)<<s, nil
							}
							x |= uint8(b&0x7f) << s
							s += 7
						}
						return x, errors.New("discriminant overflows an 8-bit integer")
					}(r)
					if err != nil {
						return nil, fmt.Errorf("failed to read discriminant: %w", err)
					}
					switch k8s__provider__types.EventTypeDiscriminant(n) {
					case k8s__provider__types.EventTypeAdded:
						return v.SetAdded(), nil
					case k8s__provider__types.EventTypeModified:
						return v.SetModified(), nil
					case k8s__provider__types.EventTypeDeleted:
						return v.SetDeleted(), nil
					default:
						return nil, fmt.Errorf("unknown discriminant value %d", n)
					}
				}(r, append(path, 0)...)
				if err != nil {
					return nil, fmt.Errorf("failed to read `event-type` field: %w", err)
				}
				slog.Debug("reading field", "name", "k8s-resource")
				v.K8sResource, err = func(r wrpc.IndexReadCloser, path ...uint32) (*k8s__provider__types.KubernetesResource, error) {
					v := &k8s__provider__types.KubernetesResource{}
					var err error
					slog.Debug("reading field", "name", "api-version")
					v.ApiVersion, err = func(r interface {
						io.ByteReader
						io.Reader
					}) (string, error) { var x uint32; var s uint8; for i := 0; i < 5; i++ {
						slog.Debug("reading string length byte", "i", i)
						b, err := r.ReadByte()
						if err != nil {
							if i > 0 && err == io.EOF {
								err = io.ErrUnexpectedEOF
							}
							return "", fmt.Errorf("failed to read string length byte: %w", err)
						}
						if s == 28 && b > 0x0f {
							return "", errors.New("string length overflows a 32-bit integer")
						}
						if b < 0x80 {
							x = x | uint32(b)<<s
							if x == 0 {
								return "", nil
							}
							buf := make([]byte, x)
							slog.Debug("reading string bytes", "len", x)
							_, err = r.Read(buf)
							if err != nil {
								return "", fmt.Errorf("failed to read string bytes: %w", err)
							}
							if !utf8.Valid(buf) {
								return string(buf), errors.New("string is not valid UTF-8")
							}
							return string(buf), nil
						}
						x |= uint32(b&0x7f) << s
						s += 7
					}; return "", errors.New("string length overflows a 32-bit integer") }(r)
					if err != nil {
						return nil, fmt.Errorf("failed to read `api-version` field: %w", err)
					}
					slog.Debug("reading field", "name", "kind")
					v.Kind, err = func(r interface {
						io.ByteReader
						io.Reader
					}) (string, error) {
						var x uint32
						var s uint8
						for i := 0; i < 5; i++ {
							slog.Debug("reading string length byte", "i", i)
							b, err := r.ReadByte()
							if err != nil {
								if i > 0 && err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								return "", fmt.Errorf("failed to read string length byte: %w", err)
							}
							if s == 28 && b > 0x0f {
								return "", errors.New("string length overflows a 32-bit integer")
							}
							if b < 0x80 {
								x = x | uint32(b)<<s
								if x == 0 {
									return "", nil
								}
								buf := make([]byte, x)
								slog.Debug("reading string bytes", "len", x)
								_, err = r.Read(buf)
								if err != nil {
									return "", fmt.Errorf("failed to read string bytes: %w", err)
								}
								if !utf8.Valid(buf) {
									return string(buf), errors.New("string is not valid UTF-8")
								}
								return string(buf), nil
							}
							x |= uint32(b&0x7f) << s
							s += 7
						}
						return "", errors.New("string length overflows a 32-bit integer")
					}(r)
					if err != nil {
						return nil, fmt.Errorf("failed to read `kind` field: %w", err)
					}
					slog.Debug("reading field", "name", "metadata")
					v.Metadata, err = func(r wrpc.IndexReadCloser, path ...uint32) (*k8s__provider__types.Metadata, error) {
						v := &k8s__provider__types.Metadata{}
						var err error
						slog.Debug("reading field", "name", "name")
						v.Name, err = func(r interface {
							io.ByteReader
							io.Reader
						}) (string, error) {
							var x uint32
							var s uint8
							for i := 0; i < 5; i++ {
								slog.Debug("reading string length byte", "i", i)
								b, err := r.ReadByte()
								if err != nil {
									if i > 0 && err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									return "", fmt.Errorf("failed to read string length byte: %w", err)
								}
								if s == 28 && b > 0x0f {
									return "", errors.New("string length overflows a 32-bit integer")
								}
								if b < 0x80 {
									x = x | uint32(b)<<s
									if x == 0 {
										return "", nil
									}
									buf := make([]byte, x)
									slog.Debug("reading string bytes", "len", x)
									_, err = r.Read(buf)
									if err != nil {
										return "", fmt.Errorf("failed to read string bytes: %w", err)
									}
									if !utf8.Valid(buf) {
										return string(buf), errors.New("string is not valid UTF-8")
									}
									return string(buf), nil
								}
								x |= uint32(b&0x7f) << s
								s += 7
							}
							return "", errors.New("string length overflows a 32-bit integer")
						}(r)
						if err != nil {
							return nil, fmt.Errorf("failed to read `name` field: %w", err)
						}
						slog.Debug("reading field", "name", "namespace")
						v.Namespace, err = func(r interface {
							io.ByteReader
							io.Reader
						}) (string, error) { var x uint32; var s uint8; for i := 0; i < 5; i++ {
							slog.Debug("reading string length byte", "i", i)
							b, err := r.ReadByte()
							if err != nil {
								if i > 0 && err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								return "", fmt.Errorf("failed to read string length byte: %w", err)
							}
							if s == 28 && b > 0x0f {
								return "", errors.New("string length overflows a 32-bit integer")
							}
							if b < 0x80 {
								x = x | uint32(b)<<s
								if x == 0 {
									return "", nil
								}
								buf := make([]byte, x)
								slog.Debug("reading string bytes", "len", x)
								_, err = r.Read(buf)
								if err != nil {
									return "", fmt.Errorf("failed to read string bytes: %w", err)
								}
								if !utf8.Valid(buf) {
									return string(buf), errors.New("string is not valid UTF-8")
								}
								return string(buf), nil
							}
							x |= uint32(b&0x7f) << s
							s += 7
						}; return "", errors.New("string length overflows a 32-bit integer") }(r)
						if err != nil {
							return nil, fmt.Errorf("failed to read `namespace` field: %w", err)
						}
						slog.Debug("reading field", "name", "labels")
						v.Labels, err = func(r wrpc.IndexReadCloser, path ...uint32) ([]*wrpc.Tuple2[string, string], error) {
							var x uint32
							var s uint
							for i := 0; i < 5; i++ {
								slog.Debug("reading list length byte", "i", i)
								b, err := r.ReadByte()
								if err != nil {
									if i > 0 && err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									return nil, fmt.Errorf("failed to read list length byte: %w", err)
								}
								if s == 28 && b > 0x0f {
									return nil, errors.New("list length overflows a 32-bit integer")
								}
								if b < 0x80 {
									x = x | uint32(b)<<s
									if x == 0 {
										return nil, nil
									}
									vs := make([]*wrpc.Tuple2[string, string], x)
									for i := range vs {
										slog.Debug("reading list element", "i", i)
										vs[i], err = func(r wrpc.IndexReadCloser, path ...uint32) (*wrpc.Tuple2[string, string], error) {
											v := &wrpc.Tuple2[string, string]{}
											var err error
											slog.Debug("reading tuple element 0")
											v.V0, err = func(r interface {
												io.ByteReader
												io.Reader
											}) (string, error) {
												var x uint32
												var s uint8
												for i := 0; i < 5; i++ {
													slog.Debug("reading string length byte", "i", i)
													b, err := r.ReadByte()
													if err != nil {
														if i > 0 && err == io.EOF {
															err = io.ErrUnexpectedEOF
														}
														return "", fmt.Errorf("failed to read string length byte: %w", err)
													}
													if s == 28 && b > 0x0f {
														return "", errors.New("string length overflows a 32-bit integer")
													}
													if b < 0x80 {
														x = x | uint32(b)<<s
														if x == 0 {
															return "", nil
														}
														buf := make([]byte, x)
														slog.Debug("reading string bytes", "len", x)
														_, err = r.Read(buf)
														if err != nil {
															return "", fmt.Errorf("failed to read string bytes: %w", err)
														}
														if !utf8.Valid(buf) {
															return string(buf), errors.New("string is not valid UTF-8")
														}
														return string(buf), nil
													}
													x |= uint32(b&0x7f) << s
													s += 7
												}
												return "", errors.New("string length overflows a 32-bit integer")
											}(r)
											if err != nil {
												return nil, fmt.Errorf("failed to read tuple element 0: %w", err)
											}
											slog.Debug("reading tuple element 1")
											v.V1, err = func(r interface {
												io.ByteReader
												io.Reader
											}) (string, error) {
												var x uint32
												var s uint8
												for i := 0; i < 5; i++ {
													slog.Debug("reading string length byte", "i", i)
													b, err := r.ReadByte()
													if err != nil {
														if i > 0 && err == io.EOF {
															err = io.ErrUnexpectedEOF
														}
														return "", fmt.Errorf("failed to read string length byte: %w", err)
													}
													if s == 28 && b > 0x0f {
														return "", errors.New("string length overflows a 32-bit integer")
													}
													if b < 0x80 {
														x = x | uint32(b)<<s
														if x == 0 {
															return "", nil
														}
														buf := make([]byte, x)
														slog.Debug("reading string bytes", "len", x)
														_, err = r.Read(buf)
														if err != nil {
															return "", fmt.Errorf("failed to read string bytes: %w", err)
														}
														if !utf8.Valid(buf) {
															return string(buf), errors.New("string is not valid UTF-8")
														}
														return string(buf), nil
													}
													x |= uint32(b&0x7f) << s
													s += 7
												}
												return "", errors.New("string length overflows a 32-bit integer")
											}(r)
											if err != nil {
												return nil, fmt.Errorf("failed to read tuple element 1: %w", err)
											}
											return v, nil
										}(r, append(path, uint32(i))...)
										if err != nil {
											return nil, fmt.Errorf("failed to read list element %d: %w", i, err)
										}
									}
									return vs, nil
								}
								x |= uint32(b&0x7f) << s
								s += 7
							}
							return nil, errors.New("list length overflows a 32-bit integer")
						}(r, append(path, 2)...)
						if err != nil {
							return nil, fmt.Errorf("failed to read `labels` field: %w", err)
						}
						slog.Debug("reading field", "name", "annotations")
						v.Annotations, err = func(r wrpc.IndexReadCloser, path ...uint32) ([]*wrpc.Tuple2[string, string], error) {
							var x uint32
							var s uint
							for i := 0; i < 5; i++ {
								slog.Debug("reading list length byte", "i", i)
								b, err := r.ReadByte()
								if err != nil {
									if i > 0 && err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									return nil, fmt.Errorf("failed to read list length byte: %w", err)
								}
								if s == 28 && b > 0x0f {
									return nil, errors.New("list length overflows a 32-bit integer")
								}
								if b < 0x80 {
									x = x | uint32(b)<<s
									if x == 0 {
										return nil, nil
									}
									vs := make([]*wrpc.Tuple2[string, string], x)
									for i := range vs {
										slog.Debug("reading list element", "i", i)
										vs[i], err = func(r wrpc.IndexReadCloser, path ...uint32) (*wrpc.Tuple2[string, string], error) {
											v := &wrpc.Tuple2[string, string]{}
											var err error
											slog.Debug("reading tuple element 0")
											v.V0, err = func(r interface {
												io.ByteReader
												io.Reader
											}) (string, error) {
												var x uint32
												var s uint8
												for i := 0; i < 5; i++ {
													slog.Debug("reading string length byte", "i", i)
													b, err := r.ReadByte()
													if err != nil {
														if i > 0 && err == io.EOF {
															err = io.ErrUnexpectedEOF
														}
														return "", fmt.Errorf("failed to read string length byte: %w", err)
													}
													if s == 28 && b > 0x0f {
														return "", errors.New("string length overflows a 32-bit integer")
													}
													if b < 0x80 {
														x = x | uint32(b)<<s
														if x == 0 {
															return "", nil
														}
														buf := make([]byte, x)
														slog.Debug("reading string bytes", "len", x)
														_, err = r.Read(buf)
														if err != nil {
															return "", fmt.Errorf("failed to read string bytes: %w", err)
														}
														if !utf8.Valid(buf) {
															return string(buf), errors.New("string is not valid UTF-8")
														}
														return string(buf), nil
													}
													x |= uint32(b&0x7f) << s
													s += 7
												}
												return "", errors.New("string length overflows a 32-bit integer")
											}(r)
											if err != nil {
												return nil, fmt.Errorf("failed to read tuple element 0: %w", err)
											}
											slog.Debug("reading tuple element 1")
											v.V1, err = func(r interface {
												io.ByteReader
												io.Reader
											}) (string, error) {
												var x uint32
												var s uint8
												for i := 0; i < 5; i++ {
													slog.Debug("reading string length byte", "i", i)
													b, err := r.ReadByte()
													if err != nil {
														if i > 0 && err == io.EOF {
															err = io.ErrUnexpectedEOF
														}
														return "", fmt.Errorf("failed to read string length byte: %w", err)
													}
													if s == 28 && b > 0x0f {
														return "", errors.New("string length overflows a 32-bit integer")
													}
													if b < 0x80 {
														x = x | uint32(b)<<s
														if x == 0 {
															return "", nil
														}
														buf := make([]byte, x)
														slog.Debug("reading string bytes", "len", x)
														_, err = r.Read(buf)
														if err != nil {
															return "", fmt.Errorf("failed to read string bytes: %w", err)
														}
														if !utf8.Valid(buf) {
															return string(buf), errors.New("string is not valid UTF-8")
														}
														return string(buf), nil
													}
													x |= uint32(b&0x7f) << s
													s += 7
												}
												return "", errors.New("string length overflows a 32-bit integer")
											}(r)
											if err != nil {
												return nil, fmt.Errorf("failed to read tuple element 1: %w", err)
											}
											return v, nil
										}(r, append(path, uint32(i))...)
										if err != nil {
											return nil, fmt.Errorf("failed to read list element %d: %w", i, err)
										}
									}
									return vs, nil
								}
								x |= uint32(b&0x7f) << s
								s += 7
							}
							return nil, errors.New("list length overflows a 32-bit integer")
						}(r, append(path, 3)...)
						if err != nil {
							return nil, fmt.Errorf("failed to read `annotations` field: %w", err)
						}
						return v, nil
					}(r, append(path, 2)...)
					if err != nil {
						return nil, fmt.Errorf("failed to read `metadata` field: %w", err)
					}
					slog.Debug("reading field", "name", "spec")
					v.Spec, err = func(r interface {
						io.ByteReader
						io.Reader
					}) (string, error) {
						var x uint32
						var s uint8
						for i := 0; i < 5; i++ {
							slog.Debug("reading string length byte", "i", i)
							b, err := r.ReadByte()
							if err != nil {
								if i > 0 && err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								return "", fmt.Errorf("failed to read string length byte: %w", err)
							}
							if s == 28 && b > 0x0f {
								return "", errors.New("string length overflows a 32-bit integer")
							}
							if b < 0x80 {
								x = x | uint32(b)<<s
								if x == 0 {
									return "", nil
								}
								buf := make([]byte, x)
								slog.Debug("reading string bytes", "len", x)
								_, err = r.Read(buf)
								if err != nil {
									return "", fmt.Errorf("failed to read string bytes: %w", err)
								}
								if !utf8.Valid(buf) {
									return string(buf), errors.New("string is not valid UTF-8")
								}
								return string(buf), nil
							}
							x |= uint32(b&0x7f) << s
							s += 7
						}
						return "", errors.New("string length overflows a 32-bit integer")
					}(r)
					if err != nil {
						return nil, fmt.Errorf("failed to read `spec` field: %w", err)
					}
					return v, nil
				}(r, append(path, 1)...)
				if err != nil {
					return nil, fmt.Errorf("failed to read `k8s-resource` field: %w", err)
				}
				return v, nil
			}(r, []uint32{0}...)
			return (*ResourceEvent)(v), err
		}()

		if err != nil {
			slog.WarnContext(ctx, "failed to read parameter", "i", 0, "instance", "k8s:provider/handler@0.1.0", "name", "handle", "err", err)
			if err := r.Close(); err != nil {
				slog.ErrorContext(ctx, "failed to close reader", "instance", "k8s:provider/handler@0.1.0", "name", "handle", "err", err)
			}
			return
		}
		slog.DebugContext(ctx, "calling `k8s:provider/handler@0.1.0.handle` handler")
		err = h.Handle(ctx, p0)
		if cErr := r.Close(); cErr != nil {
			slog.ErrorContext(ctx, "failed to close reader", "instance", "k8s:provider/handler@0.1.0", "name", "handle", "err", err)
		}
		if err != nil {
			slog.WarnContext(ctx, "failed to handle invocation", "instance", "k8s:provider/handler@0.1.0", "name", "handle", "err", err)
			return
		}

		var buf bytes.Buffer
		writes := make(map[uint32]func(wrpc.IndexWriter) error, 0)

		slog.DebugContext(ctx, "transmitting `k8s:provider/handler@0.1.0.handle` result")
		_, err = w.Write(buf.Bytes())
		if err != nil {
			slog.WarnContext(ctx, "failed to write result", "instance", "k8s:provider/handler@0.1.0", "name", "handle", "err", err)
			return
		}
		if len(writes) > 0 {
			for index, write := range writes {
				_ = write
				switch index {
				}
			}
		}
	})
	if err != nil {
		return nil, fmt.Errorf("failed to serve `k8s:provider/handler@0.1.0.handle`: %w", err)
	}
	stops = append(stops, stop0)
	return stop, nil
}
